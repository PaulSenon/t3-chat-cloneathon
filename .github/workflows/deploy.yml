name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Type check
        run: pnpm build --dry-run
        env:
          SKIP_ENV_VALIDATION: true

      # TODO: Add actual tests when implemented
      # - name: Run tests
      #   run: pnpm test

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Convex
        run: |
          npx convex env set OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}" --preview
          npx convex env set ANTHROPIC_API_KEY "${{ secrets.ANTHROPIC_API_KEY }}" --preview
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}

      - name: Deploy to Convex Preview
        run: npx convex deploy --cmd 'pnpm build' --preview
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY_DEV }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        run: vercel deploy --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Convex Production Environment
        run: |
          npx convex env set OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}" --prod
          npx convex env set ANTHROPIC_API_KEY "${{ secrets.ANTHROPIC_API_KEY }}" --prod
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}

      - name: Deploy to Convex Production
        run: npx convex deploy --cmd 'pnpm build' --prod
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Post-deployment Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          # TODO: Add health check endpoint and test here
          echo "Deployment completed successfully!"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production, deploy-preview]
    steps:
      - name: Notify on Success
        if: needs.deploy-production.result == 'success' || needs.deploy-preview.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          # TODO: Add Slack/Discord notification here if needed

      - name: Notify on Failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-preview.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # TODO: Add failure notification here if needed